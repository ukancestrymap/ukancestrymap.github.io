{"version":3,"sources":["UkMap.js","UserInterface.js","help_text.js","postcode_info.js","PostcodeInfo.js","Data.js","App.js","serviceWorker.js","index.js"],"names":["UkMap","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","updateDimensions","setState","height","svg_ref","clientHeight","width","clientWidth","state","window","addEventListener","bind","removeEventListener","postcodes","selected_postcode","highlight_postcode","_this2","uk_geojson","postcode_data","has_data","myColor","scaleLinear","domain","color_range","range","projection","geoAlbers","center","rotate","parallels","fitExtent","pathGenerator","geoPath","features","map","d","i","color","get_data","mean","isNaN","react_default","a","createElement","key","fill","onClick","event","select_postcode","onMouseOver","mouseover_postcode","stroke","strokeWidth","className","filter","ref","element","React","Component","display_pop_map","IBD","fN","display_data_map","ibd_segments","genome_fraction","mutations","Help","popover","icon","intent","Intent","PRIMARY","card","string","Options","label","htmlSelect","id","labelFor","options","onChange","value","UserInterface_Help","longHelperText","UserInterface","handleAndvancedChange","advanced","editing_postcode","editing_postcode_text","more_information","thresholds","get_thresholds","x","threshold_scale","selected_threshold","display_timespan","thresholds_min","thresholds_max","length","thresholds_step","Math","round","data_min","min","data_max","max","data_step","data_range","population_options","display_pop_options","data_options","display_data_options","postcode_name","postcode_names","standard","html","UserInterface_Options","helperText","display_pop_callback","display_pop_index","display_data_callback","display_data_index","formGroup","slider","stepSize","labelStepSize","display_timespan_callback","inline","inputGroup","leftIcon","placeholder","onFocus","onBlur","e","target","onKeyPress","which","color_range_mode_callback","color_range_mode","rangeSlider","labelPrecision","disabled","color_range_callback","readOnly","parameters_string","interactive","elevation","Elevation","TWO","controls","checked","buttons","text","createOverlayHandler","overlay","isOpen","toggle","_this3","defineProperty","postcode_info","AB","samples","all","white","name","AL","B","BA","BB","BD","BH","BL","BN","BR","BS","BT","CA","CB","CF","CH","CM","CO","CR","CT","CV","CW","DA","DD","DE","DG","DH","DL","DN","DT","DY","E","EC","EH","EN","EX","FK","FY","G","GL","GU","HA","HD","HG","HP","HR","HS","HU","HX","IG","IP","IV","KA","KT","KW","KY","L","LA","LD","LE","LL","LN","LS","LU","M","ME","MK","ML","N","NE","NG","NN","NP","NPT","NR","NW","OL","OX","PA","PE","PH","PL","PO","PR","RG","RH","RM","S","SA","SE","SG","SK","SL","SM","SN","SO","SP","SR","SS","ST","SW","SY","TA","TD","TF","TN","TQ","TR","TS","TW","UB","W","WA","WC","WD","WF","WN","WR","WS","WV","YO","ZE","TopHistogram","data","push","names","sort","b","first_n","slice","top_n","bar_chart_data_range","x0","y0","lower_95","y","upper_95","bar_chart_data","es","margin","left","opacity","tickValues","toConsumableArray","Array","keys","tickFormat","v","PostcodeInfo","div_ref","to_postcode_name","from_postcode_name","from_postcode_name_long","from_postcode_data","postcode_index","postcode_geo","geoCentroid","fillOpacity","from_postcode_colored","style","to_postcode_colored","ZERO","PostcodeInfo_TopHistogram","toPrecision","Data","index_map","backend_data","data_stride","current_threshold","upper_index","lower_weight","upper_weight","sorted_data","threshold","findIndex","backend_index","row_index","data_index","upper_data","lower_data_index","lower_data","NaN","axios","defaults","baseURL","App","param","def","select_postcode_name","selected_postcode_index","get_postcode_data","mouseover_postcode_index","currentTarget","selectedIndex","prevState","set_threshold","set_color_range","mode","prev_color_range","second_max","backend_api","backend_postcode_indices","backend_thresholds","location","search","loaded_parameters","queryString","parse","parseParamInt","parseInt","parseFloat","uk_topojson","json","get_postcode_api","Promise","then","values","_i","_display_pop_options","pop","names_json","objects","geometries","names_bknd","indicies","calculate_index_mapping","feature","names1","names2","indices","j","saved_parameters","protocol","host","pathname","stringify","join","src_UkMap","map_ref","src_UserInterface","src_PostcodeInfo","get","display_data","display_pop","get_backend_index","url","responseType","headers","Accept","response","bytes","floats","Float32Array","set_data","catch","error","console","log","withRouter","Boolean","hostname","match","routing","react_router_dom","react_router","path","component","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.714245ea.chunk.js","sourcesContent":["import React from 'react'\nimport './App.css'\nimport {\n  geoAlbers,\n  geoPath\n} from 'd3-geo'\n\nimport {\n  scaleLinear\n} from 'd3-scale'\n\n\nclass UkMap extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      width: 100,\n      height: 100\n    };\n  }\n\n  updateDimensions = () => {\n    this.setState({\n      height: this.svg_ref.clientHeight,\n      width: this.svg_ref.clientWidth\n    });\n  };\n\n  componentDidMount() {\n    this.updateDimensions();\n    window.addEventListener(\"resize\", this.updateDimensions.bind(this));\n  }\n  componentWillUnmount() {\n    window.removeEventListener(\"resize\", this.updateDimensions.bind(this));\n  }\n\n  render() {\n\n    var postcodes, selected_postcode, highlight_postcode;\n    if (this.props.uk_geojson && this.props.postcode_data.has_data()) {\n\n      // color scale\n      const myColor = scaleLinear().domain(\n        [this.props.color_range[0],\n          this.props.color_range[1]\n        ]).range([\"white\", \"blue\"]);\n\n      const projection = geoAlbers()\n        .center([5, 54.4])\n        .rotate([4.4, 0])\n        .parallels([50, 60])\n        .fitExtent([\n          [0, 0],\n          [0.9 * this.state.width, 0.9 * this.state.height]\n        ], this.props.uk_geojson);\n\n      const pathGenerator = geoPath()\n        .projection(projection);\n\n      // generate postcode paths\n      postcodes = this.props.uk_geojson.features.map((d, i) => {\n        const color = this.props.postcode_data.get_data(i).mean;\n        if (!isNaN(color)) {\n          return <path\n                  key = {'path' + i}\n                  d = {pathGenerator(d)}\n                  fill={ myColor(color) }\n                  onClick={ (event) => {this.props.select_postcode(i);} }\n                  onMouseOver={ (event) => {this.props.mouseover_postcode(i);} }\n                  stroke={'rgba(0,0,0,0.5)'}\n                  strokeWidth={1}\n                  className = 'postcodes'\n                 />;\n        } else {\n          return <path/>;\n        }\n\n      });\n\n      highlight_postcode = this.props.uk_geojson.features.filter((d, i) => {\n          return i === this.props.highlight_postcode\n      }).map((d) => {\n          return <path\n                  className = 'postcode_highlight'\n                  key = {'highlight path'}\n                  d = {pathGenerator(d)}\n                  fill = {'none'}\n                  stroke={'green'}\n                  strokeWidth={2.5}\n                 />;\n      });\n \n      selected_postcode = this.props.uk_geojson.features.filter((d, i) => {\n          return i === this.props.selected_postcode\n      }).map((d) => {\n          return <path\n                  className = 'postcode_highlight'\n                  key = {'selected postcode'}\n                  d = {pathGenerator(d)}\n                  fill = {'none'}\n                  stroke={'red'}\n                  strokeWidth={2.5}\n                 />;\n      });\n\n    }\n\n    return (\n      <svg \n            ref={element => this.svg_ref = element}\n            className='UkMap' \n            width={\"100%\"} \n            height={\"100%\"}>\n            {postcodes}\n            {highlight_postcode}\n            {selected_postcode}\n           </svg>\n    );\n  }\n}\nexport default UkMap\n","import React from 'react'\nimport './App.css'\nimport {\n  FormGroup,\n  RangeSlider,\n  Button,\n  Overlay,\n  InputGroup,\n  Card,\n  Elevation,\n  Slider,\n  Checkbox,\n  HTMLSelect,\n  H5, H3,\n  Popover,\n  Icon,\n  Intent,\n} from \"@blueprintjs/core\";\n\nimport {help_dataset, help_datatype, help_mode} from './help_text'\n\n\nconst display_pop_map = {\n  \"IBD\": \"IBD\",\n  \"fN\": \"fN\",\n}\n\nconst display_data_map = {\n  \"ibd_segments\": \"number of ancestors\",\n  \"genome_fraction\": \"percent shared genome\",\n  \"mutations\": \"mutations\",\n}\n\nclass Help extends React.Component {\n  render() {\n    return (\n      <Popover>\n        <Icon icon=\"help\" intent={Intent.PRIMARY}/>\n        <Card className=\"help\">{this.props.string}</Card>\n      </Popover>\n    )\n  }\n}\n\nclass Options extends React.Component {\n  render() {\n    return (\n      <div className=\"options-row\">\n          <div className=\"options-column1\">\n          {this.props.label}\n          </div>\n          <HTMLSelect \n              id={this.props.labelFor}\n              className=\"options-column2\"\n              fill={true}\n              options={this.props.options}\n              onChange={this.props.onChange}\n              value={this.props.options[this.props.value]}\n          />\n          <Help className=\"options-column3\" string={this.props.longHelperText}/>\n          </div>\n    )\n  }\n}\n\n\nclass UserInterface extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      editing_postcode: false,\n      editing_postcode_text: \"\",\n      advanced: false,\n      more_information: false,\n    };\n  }\n\n\n  render() {\n    const thresholds = this.props.postcode_data.get_thresholds().map(x => this.props\n      .threshold_scale * x)\n    const selected_threshold = this.props.threshold_scale * this.props\n      .display_timespan\n    const thresholds_min = thresholds[0];\n    const thresholds_length = thresholds.length;\n    const thresholds_max = thresholds[thresholds_length - 1];\n    const thresholds_step = Math.round((thresholds_max - thresholds_min) / 5);\n    const data_min = this.props.postcode_data.min();\n    const data_max = this.props.postcode_data.max();\n    const data_step = (data_max - data_min) / 4.0;\n    let data_range = this.props.color_range\n    if (data_range[0] < data_min) {\n      data_range[0] = data_min;\n    }\n    if (data_range[1] > data_max) {\n      data_range[1] = data_max;\n    }\n    const population_options = this.props.display_pop_options.map(\n      x => display_pop_map[x]\n    )\n    const data_options = this.props.display_data_options.map(\n      x => display_data_map[x]\n    )\n    let postcode_name = this.state.editing_postcode_text\n    if (this.props.postcode_names && !this.state.editing_postcode) {\n      postcode_name = this.props.postcode_names[this.props.selected_postcode]\n    }\n\n    const standard = (\n      <div>\n          <H5>Display Options</H5>\n          <Options \n            helperText=\"some more info here...\"\n            label=\"Dataset\"\n            labelFor=\"dataset-input\"\n            options={population_options} \n            onChange={this.props.display_pop_callback}\n            value={this.props.display_pop_index}\n            longHelperText={help_dataset}\n          />\n          <Options\n            helperText=\"some more info here...\"\n            label=\"Datatype\"\n            labelFor=\"datatype-input\"\n            options={data_options} \n            onChange={this.props.display_data_callback}\n            value={this.props.display_data_index}\n            longHelperText={help_datatype}\n          />\n          <FormGroup\n            helperText=\"ancestry calculated this many years in the past\" \n            label=\"Time threshold\"\n            labelFor=\"threshold-input\"\n          >\n          <Slider\n              id=\"threshold-input\"\n              min={thresholds_min}\n              max={thresholds_max}\n              stepSize={thresholds_step/10}\n              labelStepSize={thresholds_step}\n              onChange={this.props.display_timespan_callback}\n              value={selected_threshold}\n          />\n          </FormGroup>\n          <FormGroup\n            helperText=\"area postcode (e.g. S or HA)\"\n            label=\"Postcode\"\n            labelFor=\"postcode-input\"\n            inline={true}\n          >\n          <InputGroup\n            id=\"postcode-input\"\n            leftIcon=\"geosearch\"\n            placeholder=\"Enter postcode...\"\n            onFocus={() => this.setState({editing_postcode: true})}\n            onBlur={() => this.setState({editing_postcode: false})}\n            value={postcode_name}\n            onChange={(e) => { this.setState({editing_postcode_text: e.target.value})}}\n            onKeyPress={(e) => { \n              if (e.which === 13) {\n                this.props.select_postcode(this.state.editing_postcode_text)\n              }\n            }}\n          />\n          </FormGroup>\n          </div>\n    );\n\n    const advanced = (\n      <div>\n          <FormGroup\n            helperText=\"select the range of colors to display in the map\"\n            label=\"Color Range\"\n            labelFor=\"color-range-input\"\n          >\n          <Options \n            label=\"Mode\"\n            labelFor=\"mode-input\"\n            options={[\"second largest\", \"95% percentiles\", \"set by user\"]} \n            onChange={this.props.color_range_mode_callback}\n            value={this.props.color_range_mode}\n            longHelperText={help_mode}\n          />\n          <RangeSlider \n              id=\"color-range-input\"\n              min={data_min}\n              max={data_max}\n              stepSize={0.01*data_step}\n              labelStepSize={data_step}\n              value = {data_range}\n              labelPrecision = {2}\n              disabled = {this.props.color_range_mode !== 2}\n              onChange = {this.props.color_range_callback}\n          />\n          </FormGroup>\n          <FormGroup\n            helperText=\"use this URL to save your current parameters\"\n            label=\"Copy parameters\"\n            labelFor=\"parameter-input\"\n          >\n          <InputGroup\n            id=\"parameter-input\"\n            leftIcon=\"bookmark\"\n            readOnly={true}\n            value={this.props.parameters_string}\n          />\n          </FormGroup>\n          </div>\n    );\n\n    return (\n      <Card interactive={false} elevation={Elevation.TWO}>\n      {standard}\n      <Checkbox \n        checked={this.state.advanced} \n        label=\"Show advanced\" \n        onChange={this.handleAndvancedChange} \n      />\n      {this.state.advanced && advanced}\n      <Button text=\"More Information\" intent=\"primary\" onClick={this.createOverlayHandler('more_information')} />\n      <Overlay className=\"Overlay\" isOpen={this.state.more_information}>\n        <Card interactive={false} elevation={Elevation.TWO}>\n        <H3>More Information</H3>\n        <p>This website was developed by Martin Robinson, Juba Nait-Saada, and Pier Palamara, as part of research done at the University of Oxford, UK. The data reflects genetic relatedness in the past 1,500 years among samples from the UK Biobank data set, which contains the genomes of about 500,000 donors from the UK.</p>\n        <p>We welcome feedback, bug reports, and comments on patterns reflecting historical or demographic events you may find in the data.</p>\n        <p>To contact us please write to Pier using &lt;lastnamelowercase&gt;@stats.ox.ac.uk.</p>\n        <Button text=\"Close\" onClick={this.createOverlayHandler('more_information')} />\n        </Card>\n      </Overlay>\n      </Card>\n    )\n  }\n\n  handleAndvancedChange = () => {\n    this.setState({\n      advanced: !this.state.advanced\n    });\n  };\n\n  createOverlayHandler(toggle) {\n    return () => {\n      this.setState({\n        [toggle]: !this.state[toggle]\n      });\n    };\n  }\n}\nexport default UserInterface\n","export const help_dataset = \"Select the type of data you want to display on the map. “IBD” (identical-by-descent, currently the only available option) will display data about genetic relationships between UK post codes in the past 300 to 1500 years (depending on the value of “Time threshold”, which you can set below). The intensity of the color will reflect how close the genetic relationships are between the selected region (in red) and all other regions. Regions always colored in white are post codes for which not enough data is available for this analysis. Move the mouse over a specific region to highlight it in green. Additional data can be found in the box below. Use “Show advanced” to reveal additional parameters.\"\n\nexport const help_datatype = \"Select what specific feature of genetic ancestry you want to display on the map. If you select \\\"percent shared genome\\\", the colors and numbers will reflect the percentage of genome that is shared identical-by-descent (IBD) for two average individuals from the selected regions between present day and the selected time threshold. For instance, 6.6% of the genome of two individuals from Lerwick (ZE) is co-inherited from common ancestors who lived between today and 1,500 years ago (this number is usually very small, as only a small fraction of genome is usually co-inherited from ancestors living in the recent centuries). If you select \\\"number of ancestors\\\", the map will reflect the number of shared genetic ancestors two individuals from the selected regions share on average between today and the selected time threshold. For instance, two individuals from Llandudno (LL) have on average 2.6 shared genetic ancestors in the past 1,500 years, but an individual from Llandudno shares on average less than one (0.87) common genetic ancestor in the past 1,500 years with an individual from the neighboring region of Chester (CH) (the number of shared genetic ancestors in the recent centuries is also usually quite small).\"\n\nexport const help_mode = \"This option lets you select the color range used in the map, which enables magnifying ancestry patterns in a specific interval of genetic relatedness. Clicking on different regions, you will notice that the strongest genetic relationships are always found between pairs of individuals living in the same post code. For instance, individuals from Birmingham (B) have closer genetic ties with other individuals from Birmingham than with individuals from any other post code. The same is true for all regions, including cosmopolitan areas such as London. This demonstrates that there has been limited movement of genetic ancestors (\\\"gene flow\\\") during recent centuries (\\\"isolation by distance\\\"). If the color range is set such that the brightest color reflects the sharing of no common ancestry (i.e. no IBD sharing) and the darkest color is set to reflect the largest sharing of ancestry found in the data set for the selected region, the map will become very light for all but the selected region. This makes it hard to detect any ancestry sharing patterns other than the sharing within post codes (you may try this by manually changing the color range to minimum and maximum allowed values after selecting the \\\"set by user\\\" option). To help magnify patterns of intermediate genetic relatedness across regions, you may select \\\"second largest\\\", or \\\"95% percentiles\\\". If you select \\\"second largest\\\", the lightest color will represent the sharing of 0 ancestors (and thus 0% of the genome), while the darkest color will represent the second largest value found in the data set for the selected region. Selecting \\\"95% percentiles\\\" ignores the bottom 5% and the top 5% regions, setting the lightest color to the 5th percentile of IBD sharing for a region, and the darkest color to the 95th percentile. These options help magnifying interesting ancestry patterns in the data.\"\n\n\n","\nconst postcode_info = {\n  \"AB\": {'samples': {'all': 1542 , 'white': 1433   }, 'name': \"Aberdeen\"                   },\n  \"AL\": {'samples': {'all': 2455 , 'white': 1918   }, 'name': \"St Albans\"\t                },\n  \"B\" : {'samples': {'all': 17345, 'white': 14597  }, 'name': \"Birmingham\"                 },\n  \"BA\": {'samples': {'all': 763  , 'white': 709    }, 'name': \"Bath\"                       },\n  \"BB\": {'samples': {'all': 3689 , 'white': 3458   }, 'name': \"Blackburn\"                   },\n  \"BD\": {'samples': {'all': 190  , 'white': 177    }, 'name': \"Bradford\"                   },\n  \"BH\": {'samples': {'all': 935  , 'white': 818    }, 'name': \"Bournemouth\"                 },\n  \"BL\": {'samples': {'all': 11395, 'white': 10368  }, 'name': \"Bolton\"                     },\n  \"BN\": {'samples': {'all': 0    , 'white': 0      }, 'name': \"Brighton\"                   },\n  \"BR\": {'samples': {'all': 565  , 'white': 510    }, 'name': \"Bromley\"                     },\n  \"BS\": {'samples': {'all': 16508, 'white': 15119  }, 'name': \"Bristol\"                     },\n  \"BT\": {'samples': {'all': 974  , 'white': 884    }, 'name': \"Belfast\"                     },\n  \"CA\": {'samples': {'all': 1618 , 'white': 1508   }, 'name': \"Carlisle\"                   },\n  \"CB\": {'samples': {'all': 1310 , 'white': 1121   }, 'name': \"Cambridge\"                   },\n  \"CF\": {'samples': {'all': 8696 , 'white': 7782   }, 'name': \"Cardiff\"                     },\n  \"CH\": {'samples': {'all': 2490 , 'white': 2246   }, 'name': \"Chester\"                     },\n  \"CM\": {'samples': {'all': 1344 , 'white': 1184   }, 'name': \"Chelmsford\"                 },\n  \"CO\": {'samples': {'all': 715  , 'white': 626    }, 'name': \"Colchester\"                 },\n  \"CR\": {'samples': {'all': 0    , 'white': 0      }, 'name': \"Croydon\"                     },\n  \"CT\": {'samples': {'all': 1072 , 'white': 970    }, 'name': \"Canterbury\"                 },\n  \"CV\": {'samples': {'all': 2720 , 'white': 2374   }, 'name': \"Coventry\"                   },\n  \"CW\": {'samples': {'all': 311  , 'white': 293    }, 'name': \"Crewe\"                       },\n  \"DA\": {'samples': {'all': 1485 , 'white': 1314   }, 'name': \"Dartford\"                   },\n  \"DD\": {'samples': {'all': 1418 , 'white': 1280   }, 'name': \"Dundee\"                     },\n  \"DE\": {'samples': {'all': 6504 , 'white': 6064   }, 'name': \"Derby\"                       },\n  \"DG\": {'samples': {'all': 635  , 'white': 571    }, 'name': \"Dumfries\"                   },\n  \"DH\": {'samples': {'all': 11851, 'white': 11119  }, 'name': \"Durham\"                     },\n  \"DL\": {'samples': {'all': 2985 , 'white': 2784   }, 'name': \"Darlington\"                 },\n  \"DN\": {'samples': {'all': 1172 , 'white': 1086   }, 'name': \"Doncaster\"                   },\n  \"DT\": {'samples': {'all': 326  , 'white': 305    }, 'name': \"Dorchester\"                 },\n  \"DY\": {'samples': {'all': 571  , 'white': 514    }, 'name': \"Dudley\"                     },\n  \"E\" : {'samples': {'all': 70   , 'white': 61     }, 'name': \"East London\"                 },\n  \"EC\": {'samples': {'all': 10884, 'white': 7838   }, 'name': \"East Central London\"         },\n  \"EH\": {'samples': {'all': 419  , 'white': 367    }, 'name': \"Edinburgh\"                   },\n  \"EN\": {'samples': {'all': 6643 , 'white': 5644   }, 'name': \"Enfield\"                     },\n  \"EX\": {'samples': {'all': 1132 , 'white': 1019   }, 'name': \"Exeter\"                     },\n  \"FK\": {'samples': {'all': 1719 , 'white': 1496   }, 'name': \"Falkirk\"                     },\n  \"FY\": {'samples': {'all': 1860 , 'white': 1683   }, 'name': \"Blackpool\"                  },\n  \"G\" : {'samples': {'all': 15625, 'white': 12970  }, 'name': \"Glasgow\"                     },\n  \"GL\": {'samples': {'all': 2528 , 'white': 2312   }, 'name': \"Gloucester\"                 },\n  \"GU\": {'samples': {'all': 1363 , 'white': 1190   }, 'name': \"Guildford\"                   },\n  \"HA\": {'samples': {'all': 3854 , 'white': 3078   }, 'name': \"Harrow\"                     },\n  \"HD\": {'samples': {'all': 1938 , 'white': 1775   }, 'name': \"Huddersfield\"               },\n  \"HG\": {'samples': {'all': 2510 , 'white': 2345   }, 'name': \"Harrogate\"                   },\n  \"HP\": {'samples': {'all': 2138 , 'white': 1899   }, 'name': \"Hemel Hempstead\"             },\n  \"HR\": {'samples': {'all': 685  , 'white': 638    }, 'name': \"Hereford\"                   },\n  \"HS\": {'samples': {'all': 210  , 'white': 197    }, 'name': \"Outer Hebrides\"             },\n  \"HU\": {'samples': {'all': 2484 , 'white': 2302   }, 'name': \"Hull\"                       },\n  \"HX\": {'samples': {'all': 3998 , 'white': 3657   }, 'name': \"Halifax\"                     },\n  \"IG\": {'samples': {'all': 4208 , 'white': 3598   }, 'name': \"Ilford\"                     },\n  \"IP\": {'samples': {'all': 955  , 'white': 838    }, 'name': \"Ipswich\"                     },\n  \"IV\": {'samples': {'all': 788  , 'white': 727    }, 'name': \"Inverness\"                   },\n  \"KA\": {'samples': {'all': 1206 , 'white': 1093   }, 'name': \"Kilmarnock\"                 },\n  \"KT\": {'samples': {'all': 2627 , 'white': 2273   }, 'name': \"Kingston upon Thames\"        },\n  \"KW\": {'samples': {'all': 173  , 'white': 162    }, 'name': \"Kirkwall\"                   },\n  \"KY\": {'samples': {'all': 10546, 'white': 9467   }, 'name': \"Kirkcaldy\"                   },\n  \"L\" : {'samples': {'all': 24114, 'white': 21395  }, 'name': \"Liverpool\"                   },\n  \"LA\": {'samples': {'all': 1656 , 'white': 1535   }, 'name': \"Lancaster\"                   },\n  \"LD\": {'samples': {'all': 141  , 'white': 129    }, 'name': \"Llandrindod Wells\"          },\n  \"LE\": {'samples': {'all': 3524 , 'white': 3205   }, 'name': \"Leicester\"                   },\n  \"LL\": {'samples': {'all': 718  , 'white': 656    }, 'name': \"Llandudno\"                   },\n  \"LN\": {'samples': {'all': 1448 , 'white': 1339   }, 'name': \"Lincoln\"                     },\n  \"LS\": {'samples': {'all': 21759, 'white': 19455  }, 'name': \"Leeds\"                       },\n  \"LU\": {'samples': {'all': 1374 , 'white': 1211   }, 'name': \"Luton\"                       },\n  \"M\" : {'samples': {'all': 1917 , 'white': 1784   }, 'name': \"Manchester\"                 },\n  \"ME\": {'samples': {'all': 899  , 'white': 799    }, 'name': \"Rochester\"                  },\n  \"MK\": {'samples': {'all': 1342 , 'white': 1153   }, 'name': \"Milton Keynes\"               },\n  \"ML\": {'samples': {'all': 3024 , 'white': 2501   }, 'name': \"Motherwell\"                 },\n  \"N\" : {'samples': {'all': 521  , 'white': 446    }, 'name': \"North London\"               },\n  \"NE\": {'samples': {'all': 21305, 'white': 19959  }, 'name': \"Newcastle upon Tyne\"         },\n  \"NG\": {'samples': {'all': 14987, 'white': 13710  }, 'name': \"Nottingham\"                 },\n  \"NN\": {'samples': {'all': 1901 , 'white': 1691   }, 'name': \"Northampton\"                 },\n  \"NP\": {'samples': {'all': 3538 , 'white': 3230   }, 'name': \"Newport\"                     },\n \"NPT\": {'samples': {'all': 4509 , 'white': 4194   }, 'name': \"Newport\"                     },\n  \"NR\": {'samples': {'all': 1308 , 'white': 1196   }, 'name': \"Norwich\"                     },\n  \"NW\": {'samples': {'all': 5869 , 'white': 3969   }, 'name': \"North West London\"          },\n  \"OL\": {'samples': {'all': 18852, 'white': 16548  }, 'name': \"Oldham\"                     },\n  \"OX\": {'samples': {'all': 5206 , 'white': 4731   }, 'name': \"Oxford\"                      },\n  \"PA\": {'samples': {'all': 1114 , 'white': 979    }, 'name': \"Paisley\"                    },\n  \"PE\": {'samples': {'all': 1173 , 'white': 1058   }, 'name': \"Peterborough\"                },\n  \"PH\": {'samples': {'all': 495  , 'white': 457    }, 'name': \"Perth\"                      },\n  \"PL\": {'samples': {'all': 1525 , 'white': 1389   }, 'name': \"Plymouth\"                   },\n  \"PO\": {'samples': {'all': 125  , 'white': 117    }, 'name': \"Portsmouth\"                  },\n  \"PR\": {'samples': {'all': 3243 , 'white': 2982   }, 'name': \"Preston\"                     },\n  \"RG\": {'samples': {'all': 4157 , 'white': 3730   }, 'name': \"Reading\"                     },\n  \"RH\": {'samples': {'all': 774  , 'white': 692    }, 'name': \"Redhill\"                     },\n  \"RM\": {'samples': {'all': 925  , 'white': 822    }, 'name': \"Romford\"                     },\n  \"S\" : {'samples': {'all': 21134, 'white': 19569  }, 'name': \"Sheffield\"                   },\n  \"SA\": {'samples': {'all': 3828 , 'white': 3461   }, 'name': \"Swansea\"                     },\n  \"SE\": {'samples': {'all': 2144 , 'white': 1937   }, 'name': \"South East London\"           },\n  \"SG\": {'samples': {'all': 2896 , 'white': 2518   }, 'name': \"Stevenage\"                   },\n  \"SK\": {'samples': {'all': 3035 , 'white': 2857   }, 'name': \"Stockport\"                  },\n  \"SL\": {'samples': {'all': 1844 , 'white': 1632   }, 'name': \"Slough\"                     },\n  \"SM\": {'samples': {'all': 236  , 'white': 217    }, 'name': \"Sutton\"                      },\n  \"SN\": {'samples': {'all': 1196 , 'white': 1065   }, 'name': \"Swindon\"                     },\n  \"SO\": {'samples': {'all': 1719 , 'white': 1537   }, 'name': \"Southampton\"                },\n  \"SP\": {'samples': {'all': 652  , 'white': 590    }, 'name': \"Salisbury\"                  },\n  \"SR\": {'samples': {'all': 2608 , 'white': 2454   }, 'name': \"Sunderland\"                  },\n  \"SS\": {'samples': {'all': 1455 , 'white': 1325   }, 'name': \"Southend-on-Sea\"            },\n  \"ST\": {'samples': {'all': 9005 , 'white': 8452   }, 'name': \"Stoke-on-Trent\"              },\n  \"SW\": {'samples': {'all': 197  , 'white': 186    }, 'name': \"South West London\"          },\n  \"SY\": {'samples': {'all': 0    , 'white': 0      }, 'name': \"Shrewsbury\"                  },\n  \"TA\": {'samples': {'all': 822  , 'white': 752    }, 'name': \"Taunton\"                    },\n  \"TD\": {'samples': {'all': 1028 , 'white': 958    }, 'name': \"Galashiels\"                  },\n  \"TF\": {'samples': {'all': 741  , 'white': 684    }, 'name': \"Telford\"                     },\n  \"TN\": {'samples': {'all': 629  , 'white': 566    }, 'name': \"Tunbridge Wells\"             },\n  \"TQ\": {'samples': {'all': 701  , 'white': 641    }, 'name': \"Torquay\"                     },\n  \"TR\": {'samples': {'all': 3402 , 'white': 910    }, 'name': \"Truro\"                      },\n  \"TS\": {'samples': {'all': 11660, 'white': 10867  }, 'name': \"Cleveland\"                  },\n  \"TW\": {'samples': {'all': 272  , 'white': 236    }, 'name': \"Twickenham\"                   },\n  \"UB\": {'samples': {'all': 3385 , 'white': 2959   }, 'name': \"Southall\"                    },\n  \"W\" : {'samples': {'all': 498  , 'white': 433    }, 'name': \"West London\"                },\n  \"WA\": {'samples': {'all': 1520 , 'white': 1414   }, 'name': \"Warrington\"                  },\n  \"WC\": {'samples': {'all': 5893 , 'white': 4753   }, 'name': \"Western Central London\"      },\n  \"WD\": {'samples': {'all': 4129 , 'white': 3487   }, 'name': \"Watford\"                     },\n  \"WF\": {'samples': {'all': 6103 , 'white': 5777   }, 'name': \"Wakefield\"                   },\n  \"WN\": {'samples': {'all': 5737 , 'white': 5234   }, 'name': \"Wigan\"                       },\n  \"WR\": {'samples': {'all': 895  , 'white': 779    }, 'name': \"Worcester\"                   },\n  \"WS\": {'samples': {'all': 5424 , 'white': 4842   }, 'name': \"Walsall\"                     },\n  \"WV\": {'samples': {'all': 644  , 'white': 581    }, 'name': \"Wolverhampton\"              },\n  \"YO\": {'samples': {'all': 1768 , 'white': 1627   }, 'name': \"York\"                       },\n  \"ZE\": {'samples': {'all': 45   , 'white': 44     }, 'name': \"Lerwick\"                        },\n  }\n  \nexport default postcode_info\n\n","import React from 'react'\nimport './App.css'\nimport postcode_info from './postcode_info.js'\n\nimport '../node_modules/react-vis/dist/style.css';\nimport {\n  XYPlot,\n  XAxis,\n  YAxis,\n  VerticalBarSeries,\n  VerticalRectSeries,\n} from 'react-vis';\nimport {\n  geoAlbers,\n  geoCentroid,\n  geoPath\n} from 'd3-geo'\n\n\nimport {\n  H6,\n  Card,\n  Elevation,\n} from \"@blueprintjs/core\";\n\n\nclass TopHistogram extends React.Component {\n\n  render() {\n\n    let data = [];\n    for (let i = 0; i < this.props.data.length(); ++i) {\n      data.push({data: this.props.data.get_data(i), name: this.props.names[i]});\n    }\n    data.sort((a, b) => b.data.mean - a.data.mean);\n    const remove_top_n = 1;\n    const first_n = data.slice(remove_top_n,this.props.top_n)\n\n    let bar_chart_data_range = first_n.map(\n      function(d, i) {\n        return {\n          x0: i-0.42,\n          x: i+0.42,\n          y0: d.data.lower_95,\n          y: d.data.upper_95,\n        };\n      }\n    );\n\n    let bar_chart_data = first_n.map(\n      function(d, i) {\n        return {\n          x: i,\n          y: d.data.mean,\n        };\n      }\n    );\n\n    return (\n      <XYPlot \n        height={200} \n        width={this.props.width} \n        margin={{left: 50}}\n      >\n      <VerticalBarSeries \n        data={bar_chart_data} \n        color={'blue'}\n        opacity={0.5}\n      />\n      <VerticalRectSeries \n        data={bar_chart_data_range} \n        color={'blue'}\n      />\n\n      <XAxis \n        tickValues={[...Array(this.props.top_n-remove_top_n).keys()]} \n        tickFormat={(v) => data[v+remove_top_n].name}\n      />\n      <YAxis\n        //tickFormat={(v) => v.toFixed(2)}\n      />\n      </XYPlot>\n    )\n  }\n}\n\n\nclass PostcodeInfo extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      width: 100,\n      height: 100\n    };\n  }\n\n  updateDimensions = () => {\n    this.setState({\n      height: this.div_ref.clientHeight,\n      width: this.div_ref.clientWidth\n    });\n  };\n\n  componentDidMount() {\n    this.updateDimensions();\n    window.addEventListener(\"resize\", this.updateDimensions.bind(this));\n  }\n  componentWillUnmount() {\n    window.removeEventListener(\"resize\", this.updateDimensions.bind(this));\n  }\n\n  render() {\n\n    let to_postcode_path;\n    let to_postcode_name;\n    let postcode_data = {lower_95: 0.0, mean: 0.0, upper_95: 0.0};\n\n    let from_postcode_data = postcode_data;\n    let from_postcode_name;\n    let from_postcode_name_long;\n    if (this.props.uk_geojson && this.props.postcode_data.has_data()) {\n\n      postcode_data = this.props.postcode_data.get_data(this.props.postcode_index);\n      // generate postcode paths\n      const postcode_geo = this.props.uk_geojson.features[this.props\n        .postcode_index];\n      to_postcode_name = postcode_geo.id;\n\n      from_postcode_data = this.props.postcode_data.get_data(this.props.selected_postcode);\n      from_postcode_name = this.props.postcode_names[this.props.selected_postcode]\n      const from_postcode_info = postcode_info[from_postcode_name]\n      from_postcode_name_long = from_postcode_info.name;\n\n      var center = geoCentroid(postcode_geo);\n      // Compute the angular distance between bound corners\n\n      const projection = geoAlbers()\n        .center(center)\n        .rotate([4.4, 0])\n        .fitExtent([\n          [0.2 * this.state.width, 0.2 * this.state.height],\n          [0.8 * this.state.width, 0.8 * this.state.height]\n        ], postcode_geo);\n\n      const pathGenerator = geoPath().projection(projection);\n\n\n      to_postcode_path = <path\n        key = {'path' + this.props.postcode_index}\n        d = {pathGenerator(postcode_geo)}\n        stroke={ 'rgba(0,0,0,0.5)' }\n        fill={\"blue\"}\n        fillOpacity=\"0.2\"\n        className = 'postcodes'\n      />;\n    }\n\n    const show_hover_postcode = false;\n\n    let from_postcode_colored = (<span style={{color: \"red\"}}>{from_postcode_name}</span>)\n    let to_postcode_colored = (<span style={{color: \"green\"}}>{to_postcode_name}</span>)\n\n    return (\n      <div \n        className='PostcodeInfo'\n        ref={element => this.div_ref = element}\n      >\n      <Card className='PostcodeInfoCard' interactive={false} elevation={Elevation.ZERO}>\n          <H6>{from_postcode_colored} - {from_postcode_name_long}</H6> \n          <H6>Top 10 postcodes</H6>\n          {this.props.postcode_data.has_data() &&\n          <TopHistogram \n            data={this.props.postcode_data}\n            names={this.props.postcode_names}\n            width={0.9*this.state.width}\n            top_n={10}\n          />\n          }\n          <H6>Between {from_postcode_colored} and {from_postcode_colored}: \n              [{from_postcode_data.lower_95.toPrecision(2)}, {from_postcode_data.mean.toPrecision(2)}, {from_postcode_data.upper_95.toPrecision(2)}]</H6>\n          <H6>Between {from_postcode_colored} and {to_postcode_colored}: \n              [{postcode_data.lower_95.toPrecision(2)}, {postcode_data.mean.toPrecision(2)}, {postcode_data.upper_95.toPrecision(2)}]</H6>\n          {show_hover_postcode &&\n          <svg \n            ref={element => this.svg_ref = element}\n            width={\"100%\"} \n            height={\"40%\"}>\n            {to_postcode_path}\n           </svg>\n          }\n      </Card>\n      </div>\n    );\n  }\n}\nexport default PostcodeInfo\n","class Data {\n  constructor(index_map) {\n    this.backend_data = null;\n    this.index_map = index_map;\n    this.thresholds = null;\n    this.data_stride = 0;\n    this.current_threshold = 0;\n    this.upper_index = 0;\n    this.lower_weight = 0.0;\n    this.upper_weight = 0.0;\n    this.sorted_data = new Array(index_map.length);\n  }\n\n  set_data(data, thresholds) {\n    this.backend_data = data;\n    this.thresholds = thresholds;\n    this.data_stride = thresholds.length;\n    //this.data_min = Math.min(...data);\n    //this.data_max = Math.max(...data);\n  }\n\n  min() {\n    return this.has_data() ? this.sorted_data[0].mean : 0.0;\n  }\n\n  max() {\n    return this.has_data() ? this.sorted_data[this.sorted_data.length-1].mean : 1.0;\n  }\n\n  second_max() {\n    return this.has_data() ? this.sorted_data[this.sorted_data.length-2].mean : 1.0;\n  }\n\n  has_data() {\n    return (this.backend_data != null);\n  }\n\n  length() {\n    return this.index_map.length;\n  }\n\n  get_thresholds() {\n    return this.has_data() ? this.thresholds : [0, 1, 2];\n  }\n\n  set_threshold(threshold) {\n    if (!this.has_data()) {\n      return\n    }\n    this.upper_index = this.thresholds.findIndex((i) => i > threshold);\n    if (this.upper_index === -1) {\n      this.upper_index = this.thresholds.length - 1;\n    }\n    if (this.upper_index === 0) {\n      this.lower_weight = 0;\n    } else {\n      this.lower_weight = (this.thresholds[this.upper_index] - threshold) / (this\n        .thresholds[\n          this.upper_index] - this.thresholds[\n          this.upper_index - 1]);\n    }\n    this.upper_weight = 1 - this.lower_weight;\n\n    // get sorted data for this threshold\n    if (this.has_data()) {\n      for (var i = 0; i < this.index_map.length; i++) {\n        this.sorted_data[i] = this.get_data(i);\n      }\n      this.sorted_data.sort((a, b) => a.mean - b.mean);\n    }\n  }\n\n  get_backend_index(i) {\n    return this.index_map[i];\n  }\n\n  get_data(i) {\n    const number_of_stats = 3;\n    const backend_index = this.index_map[i];\n    if (backend_index >= 0) {\n      const row_index = number_of_stats * this.data_stride *\n        backend_index;\n      const data_index = row_index + number_of_stats * this.upper_index;\n      const upper_data = this.backend_data.slice(data_index, data_index+3);\n      var data;\n      if (this.lower_weight > 0) {\n        const lower_data_index = row_index + number_of_stats* (this.upper_index - 1);\n        const lower_data = this.backend_data.slice(lower_data_index, lower_data_index+3);\n        data = {\n          lower_95: upper_data[0] * this.upper_weight + lower_data[0] * this.lower_weight, \n          mean: upper_data[1] * this.upper_weight + lower_data[1] * this.lower_weight, \n          upper_95: upper_data[2] * this.upper_weight + lower_data[2] * this.lower_weight,\n        }\n      } else {\n        data = {\n          lower_95: upper_data[0], \n          mean: upper_data[1], \n          upper_95: upper_data[2]\n        }\n      }\n      return data;\n    } else {\n      // no data\n      return NaN;\n    }\n\n  }\n}\n\nexport default Data\n","import React from 'react';\nimport axios from 'axios';\nimport {\n  withRouter\n} from 'react-router-dom';\nimport queryString from 'query-string';\nimport './App.css';\nimport UkMap from './UkMap.js';\nimport UserInterface from './UserInterface.js';\nimport PostcodeInfo from './PostcodeInfo.js';\nimport Data from './Data.js';\n\n\nimport {\n  json\n} from 'd3-fetch'\n\nimport {\n  feature\n} from \"topojson-client\"\n\n\n//axios.defaults.baseURL = 'http://localhost:5000'\n//axios.defaults.baseURL = 'https://fastsmc-app-backend.azurewebsites.net'\naxios.defaults.baseURL = 'https://fastsmc-backend.herokuapp.com'\n\nclass App extends React.Component {\n    constructor(props) {\n      super(props)\n\n      this.state = {\n        uk_geojson: null,\n        backend_api: null,\n        backend_postcode_indices: null,\n        postcode_data: null,\n        selected_postcode_index: 30,\n        mouseover_postcode_index: 30,\n        height: 100,\n        display_data_index: 0,\n        display_data_options: null,\n        display_pop_index: 0,\n        display_pop_options: null,\n        display_timespan: 10,\n        color_range: [0, 1],\n        color_range_mode: 1,\n        threshold_scale: [30, 1],\n        backend_thresholds: null,\n      };\n\n      if (this.props.location.search) {\n        const loaded_parameters = queryString.parse(this.props.location.search);\n        const parseParamInt = (param, def) => {\n          if (!param) {\n            return def;\n          }\n          return parseInt(param);\n        }\n        const parseParamArray = (param, def) => {\n          if (!param) {\n            return def;\n          }\n          return param.map(parseFloat);\n        }\n        this.state.selected_postcode_index = parseParamInt(\n          loaded_parameters.selected_postcode_index,\n          this.state.selected_postcode_index);\n        this.state.display_data_index = parseParamInt(loaded_parameters\n          .display_data_index,\n          this.state.display_data_index);\n        this.state.display_pop_index = parseParamInt(loaded_parameters\n          .display_pop_index,\n          this.state.display_pop_index);\n        this.state.display_timespan = parseParamInt(loaded_parameters\n          .display_timespan,\n          this.state.display_timespan);\n        this.state.color_range = parseParamArray(loaded_parameters.color_range,\n          this.state.color_range);\n        this.state.color_range_mode = parseParamInt(loaded_parameters\n          .color_range_mode,\n          this.state.color_range_mode);\n      }\n\n      var uk_topojson = json(\"uk-postcode-area.json\");\n      var backend_api = this.get_postcode_api();\n      Promise.all([uk_topojson, backend_api]).then((values) => {\n        const uk_topojson = values[0];\n        const backend_api = values[1].data.postcodes;\n        const display_pop_options = Object.keys(backend_api[0].data);\n        let display_data_options = []\n        for (let pop of display_pop_options) {\n          const options = Object.keys(backend_api[0].data[pop]);\n          display_data_options.push(options);\n        }\n        const backend_thresholds = values[1].data.thresholds;\n        const names_json = uk_topojson.objects['uk-postcode-area'].geometries.map(\n          i => i.id);\n        const names_bknd = backend_api.map(i => i.name);\n        const indicies = this.calculate_index_mapping(names_json, names_bknd);\n\n        this.setState({\n          uk_geojson: feature(uk_topojson, uk_topojson.objects[\n            'uk-postcode-area']),\n          postcode_names: names_json,\n          backend_api: backend_api,\n          display_data_options: display_data_options,\n          display_pop_options: display_pop_options,\n          postcode_data: new Data(indicies, backend_thresholds),\n          backend_thresholds: backend_thresholds,\n        });\n      }).then(() => {\n        this.get_postcode_data(this.state.display_data_index, this.state\n          .selected_postcode_index, this.state.display_pop_index);\n      });\n    }\n\n    calculate_index_mapping(names1, names2) {\n      var indices = new Array(names1.length);\n      for (var i = 0; i < indices.length; i++) {\n        var j = 0;\n        while (j < names2.length && names2[j] !== names1[i]) {\n          j++;\n        }\n        if (j === names2.length) {\n          indices[i] = -1;\n        } else {\n          indices[i] = j;\n        }\n      }\n      return indices;\n    }\n\n    updateDimensions = () => {\n      this.setState({\n        height: this.div_ref.clientHeight\n      });\n    };\n\n    componentDidMount() {\n      this.updateDimensions();\n      window.addEventListener(\"resize\", this.updateDimensions.bind(this));\n    }\n    componentWillUnmount() {\n      window.removeEventListener(\"resize\", this.updateDimensions.bind(this));\n    }\n    render() {\n        const saved_parameters = {\n          selected_postcode_index: this.state.selected_postcode_index,\n          display_data_index: this.state.display_data_index,\n          display_pop_index: this.state.display_pop_index,\n          display_timespan: this.state.display_timespan,\n          color_range: this.state.color_range,\n          color_range_mode: this.state.color_range_mode,\n        };\n\n        const parameters_string = [\n          window.location.protocol,\n          '//',\n          window.location.host,\n          window.location.pathname,\n          '?',\n          queryString.stringify(saved_parameters),\n        ].join('');\n\n        return (\n            <div className=\"App\" ref={element => this.div_ref = element}>\n      <UkMap \n        className=\"UkMap\" \n        ref={element => this.map_ref = element}\n        height = {this.state.height}\n        uk_geojson = {this.state.uk_geojson}\n        postcode_data= {this.state.postcode_data}\n        mouseover_postcode = {this.mouseover_postcode}\n        selected_postcode = {this.state.selected_postcode_index}\n        select_postcode = {this.select_postcode }\n        highlight_postcode = {this.state.mouseover_postcode_index}\n        color_range = {this.state.color_range}\n      />\n      <div className=\"RHS\">\n        {this.state.postcode_data &&\n        <UserInterface \n            className=\"UserInterface\" \n            display_data_options = {this.state.display_data_options[this.state.display_pop_index]}\n            display_data_index = {this.state.display_data_index}\n            display_data_callback = {this.display_data_callback}\n            display_pop_options = {this.state.display_pop_options}\n            display_pop_index = {this.state.display_pop_index}\n            display_pop_callback = {this.display_pop_callback}\n            postcode_data = {this.state.postcode_data}\n            display_timespan = {this.state.display_timespan}\n            display_timespan_callback = {this.display_timespan_callback}\n            color_range_callback = {this.color_range_callback}\n            color_range = {this.state.color_range}\n            select_postcode = {this.select_postcode_name}\n            postcode_names = {this.state.postcode_names}\n            selected_postcode = {this.state.selected_postcode_index}\n            threshold_scale = {this.state.threshold_scale[this.state.display_pop_index]}\n            parameters_string = {parameters_string}\n            color_range_mode = {this.state.color_range_mode}\n            color_range_mode_callback = {this.color_range_mode_callback}\n        />\n        }\n        {this.state.postcode_data &&\n        <PostcodeInfo\n            selected_postcode = {this.state.selected_postcode_index}\n            postcode_index = {this.state.mouseover_postcode_index}\n            uk_geojson = {this.state.uk_geojson}\n            postcode_names = {this.state.postcode_names}\n            postcode_data = {this.state.postcode_data}\n            display_data_options = {this.state.display_data_options[this.state.display_pop_index]}\n        />\n        }\n\n        <p>© Martin Robinson, Juba Nait-Saada, Pier Palamara, 2019.</p>\n        <div className=\"DetailedView\">\n        </div>\n      </div> <\n      /div>\n    );\n  }\n\n  get_postcode_api() {\n    const url = '/fastsmc/api/postcode';\n    return axios.get(url);\n  }\n\n\n\n  get_postcode_data(display_data_index, selected_postcode_index, display_pop_index) {\n    const display_data = this.state.display_data_options[display_pop_index][display_data_index];\n    const display_pop = this.state.display_pop_options[display_pop_index];\n    const backend_index = this.state.postcode_data.get_backend_index(selected_postcode_index);\n    const url = this.state.backend_api[backend_index].data[display_pop][display_data];\n    axios.get(url,{\n      responseType: 'arraybuffer',\n      headers: {\n        'Accept': 'application/octet-stream'\n      }\n      }).then((response) => {\n        // handle success\n        const bytes = response.data;\n        const floats_tmp = new Float32Array(bytes);\n        // get rid of nans\n        const floats = floats_tmp.map((i) => i || 0);\n\n        this.setState(prevState => {\n            prevState.postcode_data.set_data(floats, prevState.backend_thresholds[display_pop]);\n            prevState.postcode_data.set_threshold(prevState.display_timespan);\n            let color_range = this.set_color_range(prevState.color_range_mode,\n                                                   prevState.color_range,\n                                                   prevState.postcode_data);\n            return {\n             postcode_data: prevState.postcode_data,\n             color_range: color_range,\n           }\n        });\n      })\n      .catch(function(error) {\n        console.log('Error getting postcode_data: ' + error);\n      });\n  }\n\n  select_postcode_name = (postcode_name) => {\n    const postcode_index = this.state.postcode_names.findIndex(x => x===postcode_name) \n    if (postcode_index > -1) {\n      this.setState({\n        selected_postcode_index: postcode_index \n      });\n      this.get_postcode_data(this.state.display_data_index, postcode_index, this.state.display_pop_index);\n    } \n  }\n\n  select_postcode = (postcode_index) => {\n    this.setState({\n      selected_postcode_index: postcode_index \n    });\n    this.get_postcode_data(this.state.display_data_index, postcode_index, this.state.display_pop_index);\n  };\n\n  mouseover_postcode = (postcode_index) => {\n    this.setState({\n      mouseover_postcode_index: postcode_index \n    });\n  };\n\n  display_data_callback = (event) => {\n    const value = event.currentTarget.selectedIndex;\n    this.setState({\n      display_data_index: value\n    });\n    this.get_postcode_data(value, this.state.selected_postcode_index, this.state.display_pop_index);\n  };\n\n  display_pop_callback = (event) => {\n    const value = event.currentTarget.selectedIndex;\n\n    // if pop index changing reset data index\n    let display_data_index = this.state.display_data_index;\n    if (value !== this.state.display_pop_index) {\n      display_data_index = 0;\n    }\n\n    this.setState({\n      display_pop_index: value,\n      display_data_index: display_data_index, \n    });\n    this.get_postcode_data(display_data_index, this.state.selected_postcode_index, value);\n  };\n\n\n  display_timespan_callback = (value) => {\n    const threshold = value/this.state.threshold_scale[this.state.display_pop_index];\n    this.setState(prevState => {\n        prevState.postcode_data.set_threshold(threshold);\n        let color_range = this.set_color_range(prevState.color_range_mode,\n                                               prevState.color_range,\n                                               prevState.postcode_data);\n        return {\n         display_timespan: threshold,\n         color_range: color_range,\n       }\n    });\n  };\n\n  color_range_callback = (range) => {\n    this.setState({\n      color_range: range,\n    });\n  };\n\n  set_color_range = (mode, prev_color_range, data) => {\n    let color_range = prev_color_range;\n    if (mode === 0) {\n      color_range = [data.min(), \n                     data.second_max()];\n    } else if (mode === 1) {\n      color_range = [\n                  data.sorted_data[Math.round(data.sorted_data.length*0.05)].mean, \n                  data.sorted_data[Math.round(data.sorted_data.length*0.95)].mean, \n      ];\n    }\n    return color_range;\n  };\n\n  color_range_mode_callback = (event) => {\n    const value = event.currentTarget.selectedIndex;\n    this.setState(prevState => {\n            let color_range = this.set_color_range(value,\n                                                   prevState.color_range,\n                                                   prevState.postcode_data);\n            return {\n             color_range_mode: value,\n             color_range: color_range,\n           }\n        });\n  };\n\n\n}\n\nexport default withRouter(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { Route, BrowserRouter as Router } from 'react-router-dom'\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nconst routing = (\n  <Router>\n    <div>\n      <Route path=\"/\" component={App} />\n      <Route path=\"/:params\" component={App} />\n    </div>\n  </Router>\n)\n\nReactDOM.render(routing, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}